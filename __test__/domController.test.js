// __test__/domController.test.js

/**
 * –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã DOM
 * –°–æ–∑–¥–∞–Ω–∏–µ DOM-—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ—Å–æ–∫ 1
 */
/**
 * @jest-environment jsdom
 */
const {
    DOMController
} = require("../src/domController");
const {
    Game
} = require("../src/game");

document.body.innerHTML = `
  <div id="player-board"></div>
  <div id="cpu-board"></div>
  <div id="message"></div>
  <button id="restart-btn">Restart</button>
`;

describe("DOMController", () => {
    let dom;

    beforeEach(() => {
        dom = new DOMController();
    });

    test("–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–≥—Ä—É –∏ —Å–æ–∑–¥–∞–µ—Ç –¥–æ—Å–∫–∏", () => {
        const playerCells = document.querySelectorAll("#player-board .cell");
        const cpuCells = document.querySelectorAll("#cpu-board .cell");
        expect(playerCells.length).toBeGreaterThan(0);
        expect(cpuCells.length).toBeGreaterThan(0);
    });

    test("–æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É", () => {
        dom.updateMessage("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
        expect(document.querySelector("#message").textContent).toBe("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
    });

    test("–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏", () => {
        const oldGame = dom.game;
        document.querySelector("#restart-btn").click();
        expect(dom.game).not.toBe(oldGame);
    });
});


// –ß—Ç–æ–±—ã –∏–∑–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç—ã –æ—Ç —Ä–µ–∞–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏ –∏–≥—Ä—ã
jest.mock("../src/game");

describe("DOMController UI tests", () => {
    let dom;

    beforeEach(() => {
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        document.body.innerHTML = `
      <div id="message"></div>
      <button type="button" id="restart-btn">üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞</button>
      <div id="player-board"></div>
      <div id="cpu-board"></div>
    `;

        // –ú–æ–∫–∞–µ–º –∏–≥—Ä—É (—á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –±–æ—è)
        Game.mockImplementation(() => ({
            human: {
                board: {
                    grid: Array.from({
                        length: 2
                    }, () => Array.from({
                        length: 2
                    }, () => ({
                        hasShip: false
                    })))
                }
            },
            computer: {
                board: {
                    grid: Array.from({
                        length: 2
                    }, () => Array.from({
                        length: 2
                    }, () => ({
                        hasShip: false
                    })))
                }
            },
            gameOver: false,
            getWinner: jest.fn(() => null),
            getCurrentPlayer: jest.fn(() => "human"),
            humanAttack: jest.fn(() => ({
                result: "hit"
            })),
            computerAttack: jest.fn(() => ({
                result: "miss"
            })),
        }));

        dom = new DOMController();
        dom.init();
    });

    test("renders boards in the DOM", () => {
        expect(document.querySelectorAll(".row").length).toBeGreaterThan(0);
        expect(document.querySelectorAll(".cell").length).toBeGreaterThan(0);
    });

    test("updates message text", () => {
        dom.updateMessage("–í–∞—à —Ö–æ–¥!");
        expect(document.querySelector("#message").textContent).toBe("–í–∞—à —Ö–æ–¥!");
    });

    test("handles click on enemy cell", () => {
        const firstCell = document.querySelector("#cpu-board .cell");
        firstCell.click(); // —Å–∏–º—É–ª–∏—Ä—É–µ–º –∫–ª–∏–∫

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å
        expect(document.querySelector("#message").textContent).toContain("–•–æ–¥");
    });

    test("restart button resets the game", () => {
        const mockInit = jest.spyOn(dom, "init"); // monitor the init call
        const restartBtn = document.createElement("button");
        restartBtn.id = "restart-btn";
        document.body.appendChild(restartBtn);

        dom.addRestartListener();
        restartBtn.click(); // imitate pressing
        expect(mockInit).toHaveBeenCalled(); // check that init has been called again
        expect(document.querySelector("#message").textContent).toContain("üîÑ Restarting the game...");
    })
});